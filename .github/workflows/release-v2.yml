name: Release-v2

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+*'

permissions:
  contents: write

jobs:
  release-notes:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0
      - name: Generate Release Notes
        run: sed -n -e "1{/# /d;}" -e "2{/^$/d;}" -e "/# $(git describe --abbrev=0 --exclude="$(git describe --abbrev=0 --match='v*.*.*' --tags)" --match='v*.*.*' --tags | tr -d v)/q;p" CHANGELOG.md > release-notes.txt
      - uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: release-notes
          path: release-notes.txt
          retention-days: 1

#   terraform-provider-release:
#     name: 'Terraform Provider Release'
#     needs: [release-notes]
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
#         with:
#           # Allow goreleaser to access older tag information.
#           fetch-depth: 0

#       - name: Set up Go
#         uses: actions/setup-go@f111f3307d8850f501ac008e886eec1fd1932a34 # v5.3.0
#         with:
#           go-version-file: 'go.mod'
#           cache: true

#       - name: Import GPG key
#         uses: crazy-max/ghaction-import-gpg@cb9bde2e2525e640591a934b1fd28eef1dcaf5e5 # v6.2.0
#         id: import_gpg
#         with:
#           gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
#           passphrase: ${{ secrets.PASSPHRASE }}

#       - name: Run GoReleaser
#         uses: goreleaser/goreleaser-action@90a3faa9d0182683851fbfa97ca1a2cb983bfca3 # v6.2.1
#         with:
#           args: release --clean
#         env:
#           # GitHub sets the GITHUB_TOKEN secret automatically.
#           GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
#           GPG_FINGERPRINT: ${{ steps.import_gpg.outputs.fingerprint }}

  highest-version-tag:
    # needs: [terraform-provider-release]
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.highest-version-tag.outputs.tag }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          # Allow tag to be fetched when ref is a commit
          fetch-depth: 0
      - name: Output highest version tag
        id: highest-version-tag
        run: |
          HIGHEST=$(git tag | sort -V | tail -1)
          echo "tag=$HIGHEST" >> "$GITHUB_OUTPUT"

  changelog-newversion:
    # needs: [terraform-provider-release, highest-version-tag]
    needs: [highest-version-tag]

    # write new changelog header only if release tag is the $HIGHEST i.e. exists on main
    # and not a backport release branch (e.g. release/3.x). This results in
    # manually updating the CHANGELOG header if releasing from the non-default branch.
    # TODO: find a more deterministic way to determine release branch from tag commit
    if: github.ref_name == needs.highest-version-tag.outputs.tag
    runs-on: ubuntu-latest
    steps:
    #   - uses: actions/create-github-app-token@3ff1caaa28b64c9cc276ce0a02e2ff584f3900c5 # v2.0.2
    #     id: app-token
    #     with:
    #       app-id: ${{ secrets.APP_ID }}
    #       private-key: ${{ secrets.APP_PEM }}
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0
          ref: main
        #   token: ${{ steps.app-token.outputs.token }}
          token: ${{ secrets.ACCESS_TOKEN }}
      - name: Update Changelog Header
        run: |
          CHANGELOG_FILE_NAME="CHANGELOG.md"
          PREVIOUS_RELEASE_TAG=${{ github.ref_name }}

          # Add Release Date
          RELEASE_DATE=`date +%B' '%e', '%Y`
          sed -i -e "1 s/Unreleased/$RELEASE_DATE/" $CHANGELOG_FILE_NAME

          # Prepend next release line
          echo Previous release is: $PREVIOUS_RELEASE_TAG

          NEW_RELEASE_LINE=$(echo $PREVIOUS_RELEASE_TAG | awk -F. '{
              $1 = substr($1,2)
              $2 += 1
              printf("%s.%01d.0\n\n", $1, $2);
          }')

          echo New minor version is: v$NEW_RELEASE_LINE

          echo -e "## $NEW_RELEASE_LINE (Unreleased)\n$(cat $CHANGELOG_FILE_NAME)" > $CHANGELOG_FILE_NAME
      - run: |
            git config --local user.email changelogbot@hashicorp.com
            git config --local user.name changelogbot
            git add CHANGELOG.md
            git commit -m "Update CHANGELOG.md after ${{ github.ref_name }}"
            git push

  upload-tag-before-post-publish:
    # needs: [terraform-provider-release]
    runs-on: ubuntu-latest
    steps:
      - name: Save Release Tag
        run: echo ${{ github.ref_name }} > release-tag.data
      - uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: release-tag
          path: release-tag.data
          retention-days: 1